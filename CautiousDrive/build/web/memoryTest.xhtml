<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Cautious Drive</title>
        <meta charset="utf-8"></meta>
        <meta name="viewport" content="width=device-width, initial-scale=1"></meta>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"></link>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css"></link>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
        
        <style>
        .gameField{
            background:#1A1159;
            display: flex;
            justify-content: center;
            width:600px;
            height:500px;
        }
        .field {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
            background:#fff;
            width:315px;
            height:315px;
            margin:50px;
            transition: opacity 0.2s ease, transform 0.3s ease;
        }

        .field div {
        background:#3b2d77;
        width:100px;
        height:100px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2px;
        transition: background .3s ease;
        }    

            body {
            font-family: Verdana, Geneva, sans-serif;
        }

        #box {
            width: 200px;
            height: 200px;
            background-color: blue;
            display: none;
            position: relative; 
        }   
        
    </style>
    
        
           
    </h:head>
    
    <h:body style="background-image:url('/CautiousDrive/navigation.jpg'); background-size:cover">
           
        <nav class="navbar navbar-inverse">
            <div class="container-fluid" style="float:left; margin-left:0px; padding-left:0px; display: inline-block; vertical-align:">
                <div class="navbar-header" >
                    <a class="navbar-brand" href="/CautiousDrive/index.xhtml" style="font-size:25px; margin-left:0px; float:left">Cautious Drive</a>
                </div>    
                <ul class="nav navbar-nav" style="font-size:20px; display: inline-block; vertical-align:">
                <li> <a href="/CautiousDrive/index.xhtml">Home</a></li>
                <li> <a href="/CautiousDrive/responseTest.xhtml">Response Test</a></li>
                <li class="active"> <a href="/CautiousDrive/memoryTest.xhtml">Memory Test</a></li>
                </ul>
<!--                <form class="navbar-form navbar-left" action="/action_page.php" style="padding-left: 800px">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search..." name="search" style="font-size:20px; width: 400px"></input>
                        <div class="input-group-btn" style="padding-right:0px">
                            <button class="btn btn-default" type="submit">
                                <i class="glyphicon glyphicon-search"></i>
                            </button>
                        </div>
                    </div>
                </form>-->
            </div>
        </nav>
        
        <h1>Memory Test</h1>

        <div class="gameField">
            <div class="field" id="cellField">

            </div>
        </div>
        
        
        <script>
            var cellSetting = [
                {
                    "cellCount": 3,
                    "memoryCount": 3,
                    "fieldSize": 300,
                    "space": 1
                },
                {
                    "cellCount": 4,
                    "memoryCount": 3,
                    "fieldSize": 300,
                    "space": 1
                },
                {
                    "cellCount": 4,
                    "memoryCount": 4,
                    "fieldSize": 300,
                    "space": 1
                },
                {
                    "cellCount": 5,
                    "memoryCount": 4,
                    "fieldSize": 300,
                    "space": 1
                },
                {
                    "cellCount": 5,
                    "memoryCount": 5,
                    "fieldSize": 350,
                    "space": 1
                },
                {
                    "cellCount": 5,
                    "memoryCount": 6,
                    "fieldSize": 350,
                    "space": 1
                },
                {
                    "cellCount": 5,
                    "memoryCount": 6,
                    "fieldSize": 350,
                    "space": 1
                },
                {
                    "cellCount": 5,
                    "memoryCount": 7,
                    "fieldSize": 350,
                    "space": 1
                },
                {
                    "cellCount": 6,
                    "memoryCount": 7,
                    "fieldSize": 360,
                    "space": 1
                },
                {
                    "cellCount": 6,
                    "memoryCount": 8,
                    "fieldSize": 360,
                    "space": 1
                },
                {
                    "cellCount": 6,
                    "memoryCount": 9,
                    "fieldSize": 360,
                    "space": 1
                },
                {
                    "cellCount": 6,
                    "memoryCount": 10,
                    "fieldSize": 360,
                    "space": 1
                }
            ];


            //Default setting;
            var fieidDiv = document.getElementById("cellField");
            var level = 0;
            var cellCount= 3;
            var memoryCount = 3;
            var fieldSize = 300;
            var totCellCount = 3*3;
            var correctGuess = 0;
            var wrongAttempt = 0;
            var correctAttempt = 0;
            var cellSize = fieldSize/cellCount;
            var cellsIndexes = [...Array(9)].map((_, i) => i);
            var field = [...cellsIndexes].fill(1);
            levelConfig();
            var innerDiv;
            var hiddenCells = [];
            function generateGame(){
            fieidDiv.innerHTML = "";
            for (var i=0;i &lt; totCellCount;i++){
  		innerDiv = document.createElement('div');
                innerDiv.addEventListener("click", changeColor);
		innerDiv.id = i;
  		fieidDiv.appendChild(innerDiv);
            }
                generateGuess();
            }
            generateGame();
  
            function changeColor(){
            var clickItem = Number(this.id);
            //var resetWrong = this.id;
            var conditionCheck = hiddenCells.indexOf(clickItem);
            if(conditionCheck &lt; 0){
       		this.style.background = "red";  
            setTimeout(function(){ 
		resetColor();
            }, 1400);
            correctGuess = 0;
            wrongAttempt = wrongAttempt + 1;
            if(wrongAttempt  &gt; 1){
               level = 0;
               setTimeout(function(){ 
                        updateLevel();
                        generateGuess();
                    }, 2000);
                }else{
                	setTimeout(function(){ 
                            generateGuess();
               		}, 2000);
                }
 				
            }
            else
            {
       		this.style.background = "#95C8B9";
                correctGuess = correctGuess + 1;
                if(correctGuess === memoryCount){
            	correctGuess = 0;
                correctAttempt = correctAttempt + 1;
                if(correctAttempt  &gt; 1){
                	level = level+1;
                	hiddenCells=[];
                	setTimeout(function(){
                    	resetColor();
                  		updateLevel();
               		}, 1000);
             	}else{
             	   setTimeout(function(){ 
                  		generateGuess();
               		}, 2000);
                    } 
                
                }
            }

        }
    
///////////////////////////////////////////////////////////

    function generateGuess(){
        hiddenCells = [];
        cellsIndexes = [];
        cellsIndexes = [...Array(cellCount * cellCount)].map((_, i) => i);
        field = [...cellsIndexes].fill(1);
        resetColor();
        for (var a = 0; a &lt; memoryCount; a++) {
        var rNum = Math.floor(Math.random() * cellsIndexes.length);
        var toChange = cellsIndexes.splice(rNum, 1).pop();
        hiddenCells.push(toChange);
        field[toChange] = 2;
    }

    for(var b=0;b &lt;memoryCount;b++){	
        	var index = hiddenCells[b];
        	document.getElementById(index).style.background = "#95C8B9";
        }
       setTimeout(function(){ 
			resetColor();
           }, 1400);

    }

    function updateLevel(){
        levelConfig();
        correctAttempt = 0;
        wrongAttempt = 0;
        var setFieldSize = fieldSize + 5*cellCount;
        var setCellSize = fieldSize/cellCount;
        var fieldDeclaration = document.styleSheets[0].cssRules[1].style;
        var cellDeclaration = document.styleSheets[0].cssRules[2].style;
        var fieldWidth = setFieldSize + 'px';
        var cellWidth = setCellSize + 'px';
        fieldDeclaration.setProperty('width',fieldWidth);
        fieldDeclaration.setProperty('height',fieldWidth);
        cellDeclaration.setProperty('width',cellWidth);
        cellDeclaration.setProperty('height',cellWidth);
        generateGame();
    }

    function levelConfig(){

    switch (level) {
        case 0:
            cellCount = cellSetting[0].cellCount;
            memoryCount = cellSetting[0].memoryCount;
            fieldSize = cellSetting[0].fieldSize;
            break;
        case 1:
            cellCount = cellSetting[1].cellCount;
            memoryCount = cellSetting[1].memoryCount;
            fieldSize = cellSetting[1].fieldSize;
            break;
        case 2:
            cellCount = cellSetting[2].cellCount;
            memoryCount = cellSetting[2].memoryCount;
            fieldSize = cellSetting[2].fieldSize;
            break;
        case 3:
            cellCount = cellSetting[3].cellCount;
            memoryCount = cellSetting[3].memoryCount;
            fieldSize = cellSetting[3].fieldSize;
            break;
        case 4:
            cellCount = cellSetting[4].cellCount;
            memoryCount = cellSetting[4].memoryCount;
            fieldSize = cellSetting[4].fieldSize;
            break;
        case 5:
            cellCount = cellSetting[5].cellCount;
            memoryCount = cellSetting[5].memoryCount;
            fieldSize = cellSetting[5].fieldSize;
            break;
        case 6:
            cellCount = cellSetting[6].cellCount;
            memoryCount = cellSetting[6].memoryCount;
            fieldSize = cellSetting[6].fieldSize;
            break;
        case 7:
            cellCount = cellSetting[7].cellCount;
            memoryCount = cellSetting[7].memoryCount;
            fieldSize = cellSetting[7].fieldSize;
            break;
        case 8:
            cellCount = cellSetting[8].cellCount;
            memoryCount = cellSetting[8].memoryCount;
            fieldSize = cellSetting[8].fieldSize;
        break;
        case 9:
            cellCount = cellSetting[9].cellCount;
            memoryCount = cellSetting[9].memoryCount;
            fieldSize = cellSetting[9].fieldSize;
        break;
        case 10:
            cellCount = cellSetting[10].cellCount;
            memoryCount = cellSetting[10].memoryCount;
            fieldSize = cellSetting[10].fieldSize;
        break;
        case 11:
            cellCount = cellSetting[11].cellCount;
            memoryCount = cellSetting[11].memoryCount;
            fieldSize = cellSetting[11].fieldSize;
        break; 
  
    }

    totCellCount = cellCount*cellCount;
    cellsIndexes = [];
    field = [];
    cellsIndexes = [...Array(totCellCount)].map((_, i) => i);
    field = [...cellsIndexes].fill(1);
  
    }

    function resetColor(){
        for(var c=0; c &lt;field.length;c++){	
            document.getElementById(c).style.background = "#3b2d77";
 		}
        
    }

    </script>
        
        
        
        
        
        
        <div style="padding-top: 150px">
        <center>
            <button onclick="location.href='/CautiousDrive/result.xhtml'" class="btn btn-primary" style="font-size:25px;margin-top:30px">See your result</button>
        </center>  
        </div>
        
<!--        <div style="margin-top: 20px">
        <center>
            <button onclick="location.href='/NativeAnimals/user/rescueRecords.xhtml'" class="btn btn-primary" style="font-size:25px;margin-top:30px">User Login</button>
        </center>
        </div>-->

        
        



    </h:body>
    
    
    
    
</html>
